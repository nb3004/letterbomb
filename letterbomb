#!/usr/bin/env bash
##
## Letterbomb.
## An easy to use static blog generator using markdown and html templates.

function print_help {
		echo "Usage: $(basename $0) [options] -i in_dir -o out_dir"
		echo " -i=dir  Input directory containing markdown posts."
		echo " -o=dir  Output directory for generated HTML pages."
		echo " -t=dir  Directory containing user templates."
		echo " -h      Print this help."
}

## check for dependencies
##
if ! which pandoc > /dev/null; then
		echo "Error: Requires pandoc to generate html." >&2
		exit 1
fi
if ! which m4 > /dev/null; then
		echo "Error: Requires m4 to generate html." >&2
		exit 1
fi

## see 'man strftime' for options
DATE_IN_FORMAT="%b %d %Y" #Feb 11 2013
DATE_OUT_FORMAT="%c" #Sun Feb 10 18:16:07 2013
INDEX_POST_COUNT='' #number. if empty, put all posts on single page

## globals
##
BIN_ROOT=$(cd -P $(dirname "$0") && pwd)
DEFAULT_TEMPLATES="$BIN_ROOT/templates"
USER_TEMPLATES=''
SOURCE_ROOT=''
OUT_ROOT=''

#file paths and properties. TODO: associative-arrays not supported in osx stock bash :/
if ! declare -A FILE_METADATA > /dev/null; then
		echo "Error: Associative arrays not supported in this version of bash. Exiting."  >&2
		exit 1
fi

#files with a supported extension are passed to pandoc, otherwise copied over.
#for a list of pandoc input formats: pandoc -h
declare -a PANDOC_EXTS=('md' 'markdown' 'html' 'json' 'latex' 'textile' 'rst')

## test if an extenstion type is supported, 0 for false, 1 for true.
## accepts a extenstion suffix or a file path.
##
function is_supported_ext {
		local test_ext="$(basename $1)" val=0
		test_ext="${test_ext#*.}"
		for ext in "${PANDOC_EXTS[@]}"; do
				if [[ "$test_ext" == "$ext" ]]; then
						val=1
						break
				fi
		done
		echo $val
}

## absolute file path. because osx doesn't have readlink -f
##
function abspath {
		local path="$1" oldpwd="$PWD"
		if [ -d "$path" ]; then
				cd "$path"
				dirs -l +0
		else
				cd "$(dirname $path)"
				local d=$(dirs -l +0)
				echo "${d%/}/${path##*/}"
		fi
		cd "$oldpwd"
}

# Post metadata is stored in an associative-array using the file path as a key.
# Its value is a property string in the form: 'key1=val1|key2=val2|...'
#
function get_metadata_val {
		local file="$1" key="$2" m_key='' m_val=''
		IFS=$'|'
		for x in ${FILE_METADATA["$file"]}; do
				m_key=$(echo "$x" | cut -d '=' -f1)
				if [[ "$m_key" == "$key" ]]; then
						m_val=$(echo "$x" | cut -d '=' -f2)
						break
				fi
		done
		unset IFS
		echo "$m_val"
}

# return a string of html meta tags. ignore title and template properties.
#
function create_metadata_html {
		local file="$1" m_key='' m_val='' metadata_html=''
		IFS=$'|'
		for x in ${FILE_METADATA["$file"]}; do
				m_key=$(echo "$x" | cut -d '=' -f1)
				if [[ "$m_key" != "title" && "$m_key" != "template" && "$m_key" != "link" ]]; then
						m_val=$(echo "$x" | cut -d '=' -f2)
						#date stored as unix seconds for sorting, convert to timestap
						if [[ "$m_key" == "date" ]]; then
								m_val=$(date -j -f %s "$m_val" "+$DATE_OUT_FORMAT")
						fi
						metadata_html="$metadata_html<meta name=\"$m_key\" content=\"$m_val\">\n"
				fi
		done
		unset IFS
		echo -e "$metadata_html"
}

# return path to html template specified in post, if none, use 'default'.
# first check user-specified template directory, falling back to common.
#
function get_post_template {
		local file="$1" tmpl_path=''
		local tmpl_name=$(get_metadata_val "$file" "template")

		if [ -z "$tmpl_name" ]; then tmpl_name="default"; fi

		if [[ -n "$USER_TEMPLATES" && -f "$USER_TEMPLATES/$tmpl_name.html" ]]; then
				tmpl_path="$USER_TEMPLATES/$tmpl_name.html"
		fi
		if [ -z "$tmpl_path" ]; then
				tmpl_path="$DEFAULT_TEMPLATES/$tmpl_name.html"
		fi
		if [ ! -f "$tmpl_path" ]; then
				echo "Error: '$tmpl_name' template not found for $file." >&2
				tmpl_path=''
		fi
		echo "$tmpl_path"
}

# Convert a human readable date to unix minutes for sorting.
#
function parse_date_format {
		local date_str="$0" date_sec=''
		# adds current seconds to timestap, not desired
		if ! date_sec=$(date -j -f "$DATE_IN_FORMAT" "$date_str" +%s 2> /dev/null); then
				echo "Error: Unable to parse date '$date_str'"
				exit 1
		fi
		echo "$date_sec"
}

# given a line 'key:val', extract field value and remove surrounding whitespace
#
function get_metadata_field {
		local f="$1" line="$2"
		echo "$line" | cut -d ':' -f "$f" | \
				awk '{ gsub(/^[ \t]+|[ \t]+$/, ""); print }' | \
				tr '[:blank:]' ' ' | tr -s '[:space:]'
}

MATCH_REMOVE_COMMENT_PREFIX="gsub(/^%%[[:space:]]*/, \"\") { print }" #awk

# Store post properties. Metadata lines start with '%%' and contain 'key:value'
#
function extract_post_metadata {
		local file="$1" key='' val=''

		if [ ! -f "$file" ]; then
				echo "Error: Invalid file '$file'" >&2
				exit 1
		fi

		local metadata="link=$(basename $file | sed 's/\..*$//g').html"

		while read line; do
				key=$(get_metadata_field 1 "$line" | tr '[:upper:]' '[:lower:]')
				val=$(get_metadata_field 2 "$line")
				if [[ "$key" == "date" ]]; then
						val=$(parse_date_format "$val")
				fi
				metadata="$metadata|$key=$val"
		done < <(cat "$file" | awk "$MATCH_REMOVE_COMMENT_PREFIX" | grep -e '^.*:')

		#add defaults if not there
		if ! echo "$metadata" | grep "date=" > /dev/null; then
				#file modification time in unix seconds
				metadata="$metadata|date=$(stat -f %Dm $file)"
		fi
		FILE_METADATA["$file"]="$metadata"
}

# Convert markdown to html using pandoc and templates.
#
function convert_post {
		local in_file="$1" out_dir="$2"
		
		if [[ ! -f "$in_file" || ! -d "$out_dir" ]]; then
				echo "Error: Invalid arguments '$in_file', '$out_dir'" >&2
				exit 1
		fi
		local out_file="$out_dir/$(get_metadata_val $in_file 'link')"
		local title=$(get_metadata_val "$in_file" "title")
		local metadata=$(create_metadata_html "$in_file")
		local template=$(get_post_template "$in_file")
		#error message in get_post_template, but must exit here
		if [ -z "$template" ]; then exit 1; fi

		#markdown to html, ignore '%%' comments
		if cat "$in_file" | grep -v '^%%' | \
				pandoc -t html5 --smart --standalone \
				--template "$template" --output "$out_file" \
				-V title="$title" -V metadata="$metadata";
		then
				echo "    * $out_file"
		else
				echo "Error: Unable to convert file '$in_file'" >&2
				exit 1
		fi
}

# Copy any files or directories to output directory, excluding markdown
# and any files that start with a period or underscore.
#
function copy_asset {
		local in_file="$1" out_dir="$2"
		#if output dir is within post dir, do not copy self
		if [[ "$(abspath $in_file)" != "$(abspath $out_dir)" ]]; then
				cp -a "$in_file" "$out_dir"
		else
				echo "Warning: Unable to copy asset '$in_file', skipping." >&2
		fi
}

# Copy any files or directories to output directory, excluding .html files.
#
function copy_template_assets {
		local in_dir="$1" out_dir="$2"
		while read path; do
				copy_asset "$path" "$out_dir"
		done < <(find "$in_dir" -depth 1 \( ! -name ".*" ! -name "_*" ! -iname "readme.*" ! -iname "*.html" \))
}

## iterate over posts directory, decide whether to convert or copy.
## readmes and files that start with a period or underscore are ignored.
##
function iterate_posts {
		local in_dir="$1" out_dir="$2"

		while read path; do
				if [[ ! -d "$path" && $(is_supported_ext "$path") == 1 ]]; then
						extract_post_metadata "$path"
						convert_post "$path" "$out_dir"
				else
						copy_asset "$path" "$out_dir"
				fi
		done < <(find "$in_dir" -depth 1 \( ! -name ".*" ! -name "_*" ! -iname "readme.*" \))

		#display warning for ignored files, just in case
		while read path; do
				echo "Warning: Ignoring file '$path'" >&2
		done < <(find "$in_dir" -depth 1 \( -name ".*" -or -name "_*" -or -iname "readme.*" \))
}

## generates an index of posts using a template. if given a post count,
## create multiple index pages containing that many posts.
## TODO: doesn't suppport multiple indicies, post count not implemented
##
function generate_index {
		local post_count="$1" sort_group='' list_html='<ol>'
		
		for f in "${!FILE_METADATA[@]}"; do
				local m_date=$(get_metadata_val "$f" 'date')
				local m_link=$(get_metadata_val "$f" 'link')
				local m_title=$(get_metadata_val "$f" 'title')
				sort_group="$m_date|$m_link|$m_title\n$sort_group"
		done

		while read line; do
				local url=$(echo "$line" | cut -d '|' -f2)
				local title=$(echo "$line" | cut -d '|' -f3)
				if [ -z "$title" ]; then title=$(basename "$url" ".html"); fi
				list_html="$list_html\n<li><a href='./$url'>$title</a></li>"
		done < <(echo -e "${sort_group%\\n}" | sort -t '|' -r)

		list_html=$(echo -e "$list_html\n</ol>")
		
		#TODO: command-line arg?
		local site_title="A Sample Title"

		#TODO: index template is inconsistent, can't use $title$ form?
		if m4 --define "__TITLE__=$site_title" --define "__INDEX__=$list_html" \
				"$DEFAULT_TEMPLATES/index.html" > "$OUT_ROOT/index.html";
		then
				echo "    * $OUT_ROOT/index.html"
		else
				echo "Error: Unable to create index file." >&2
				exit 1
		fi
}

## check command-line args
##
while getopts "i:o:t:h" option; do
    case $option in
				i) SOURCE_ROOT="$OPTARG";;
				o) OUT_ROOT="$OPTARG";;
				t) USER_TEMPLATES="$OPTARG";;
        h) print_help; exit 0;;
        \?) print_help; exit 0;;
    esac
done

if [[ -z "$SOURCE_ROOT" || -z "$OUT_ROOT" ]]; then
		print_help
		exit 1
fi

if [ ! -d "$SOURCE_ROOT" ]; then
		echo "Error: Invaild source directory '$SOURCE_ROOT'" >&2
		exit 1
fi

if [[ -n "$USER_TEMPLATES" && ! -d "$USER_TEMPLATES" ]]; then
		echo "Error: Invalid user template directory '$USER_TEMPLATES'" >&2
		exit 1
fi

if [ ! -d "$OUT_ROOT" ]; then
		mkdir "$OUT_ROOT"
fi

## copy assets from template and user sources. overwrite in this order:
## 1. master template assets: everything except html files.
## 2. user template assets: everything except html files.
## 3. post directory assets

copy_template_assets "$DEFAULT_TEMPLATES" "$OUT_ROOT"

if [ -n "$USER_TEMPLATES" ]; then
		copy_template_assets "$USER_TEMPLATES" "$OUT_ROOT"
fi

## and off we go ...

echo "Generating files ..."

## generate html posts from templates, copy user assets.

iterate_posts "$SOURCE_ROOT" "$OUT_ROOT"

generate_index "$INDEX_POST_COUNT"

## TODO: generate rss feed
